pipeline {
    agent none
    parameters {
        string(name: 'TEAM_NUMBER', defaultValue: '01', description: 'Team number (e.g., 01)')
        string(name: 'COHORT', defaultValue: 'c500', description: 'Cohort (e.g., c500)')
        string(name: 'NUMBER_OF_TEAMS', defaultValue: '1', description: 'Number of teams')
    }
    environment {
        ECR_REPO = '108174090253.dkr.ecr.us-east-1.amazonaws.com/production-support-course'
    }
    stages {
        // Iterate over the number of teams
        script {
            def numberOfTeams = params.NUMBER_OF_TEAMS.toInteger()
            for (int i = 1; i <= numberOfTeams; i++) {
                def teamNumber = String.format("%02d", i)
                buildTradingFrontEnd(teamNumber)
                buildAndPublishDB(teamNumber)
                buildAndPublishAPI(teamNumber)
            }
        }
    }
}

def buildTradingFrontEnd(teamNumber) {
    stage("Build Trading Front End - Team ${teamNumber}") {
        agent {
            node {
                label 'kaniko'
            }
        }
        steps {
            container(name: 'kaniko') {
                sh """echo '{ "credsStore": "ecr-login" }' > /kaniko/.docker/config.json
/kaniko/executor -f `pwd`/Dockerfiles/Dockerfile_nginx -c `pwd` --insecure --skip-tls-verify --cleanup --cache=false --destination=${ECR_REPO}:${COHORT}team${teamNumber}fe-dev-${BUILD_NUMBER}"""
            }
        }
    }
}

def buildAndPublishDB(teamNumber) {
    stage("Build and Publish DB - Team ${teamNumber}") {
        agent {
            node {
                label 'kaniko'
            }
        }
        steps {
            container(name: 'kaniko') {
                sh """echo '{ "credsStore": "ecr-login" }' > /kaniko/.docker/config.json
/kaniko/executor -f `pwd`/Dockerfiles/Dockerfile_mysql -c `pwd` --insecure --skip-tls-verify --cleanup --cache=false --destination=${ECR_REPO}:${COHORT}team${teamNumber}db-dev-${BUILD_NUMBER}"""
            }
        }
    }
}

def buildAndPublishAPI(teamNumber) {
    stage("Build and Publish API - Team ${teamNumber}") {
        agent {
            node {
                label 'kaniko'
            }
        }
        steps {
            container(name: 'kaniko') {
                sh """echo '{ "credsStore": "ecr-login" }' > /kaniko/.docker/config.json
/kaniko/executor -f `pwd`/Dockerfiles/Dockerfile_fastapi -c `pwd` --insecure --skip-tls-verify --cleanup --cache=false --destination=${ECR_REPO}:${COHORT}team${teamNumber}api-dev-${BUILD_NUMBER}"""
            }
        }
    }
}
