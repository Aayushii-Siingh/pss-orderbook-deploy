def buildAndPublishStage(String service, String dockerfile, int teamNumber) {
    return {
        stage("Build and Publish ${service} - Team ${teamNumber}") {
            agent {
                node {
                    label "kaniko"
                }
            }
            steps {
                script {
                    def iValue = teamNumber.toString()
                    def imageName = "${ECR_REPO}:${JOB_NAME_FORCED}${service.toLowerCase()}-dev-${BUILD_NUMBER}\$(printf \"%02d\" \${iValue})"
                    sh """echo '{ "credsStore": "ecr-login" }' > /kaniko/.docker/config.json
                        /kaniko/executor -f \$(pwd)/Dockerfiles/${dockerfile} -c \$(pwd) --insecure --skip-tls-verify --cache=false --destination=${imageName}
                    """
                }
            }
        }
    }
}

pipeline {
    agent none
    stages {
        script {
            def services = ['DB', 'API', 'fe']
            for (int i = 1; i <= NUMBER_OF_TEAM.toInteger(); i++) {
                for (service in services) {
                    def dockerfile = "Dockerfile_${service.toLowerCase()}"
                    buildAndPublishStage(service, dockerfile, i).call()
                }
            }
        }
    }

    environment {
        ECR_REPO = '108174090253.dkr.ecr.us-east-1.amazonaws.com/production-support-course'
        JOB_NAME_FORCED = 'c500team'
        NUMBER_OF_TEAM = '60'
    }
}
