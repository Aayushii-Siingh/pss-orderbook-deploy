pipeline {
  agent {
    kubernetes {
        yaml """\
    apiVersion: v1
    kind: Pod
    metadata:
      labels:
        builder: promotion
    spec:
      serviceAccountName: jenkins-agent
      containers:
      - name: awscli
        image: amazon/aws-cli
        command:
        - cat
        tty: true
    """.stripIndent()
    }
  }
  stages {
    stage('Promote to UAT env') {
      steps {
          container(name: 'awscli') {
            script {
              buildNumber = Jenkins.instance.getItem(projectName).lastSuccessfulBuild.number
            }

            sh '''
            #!/bin/bash
            export AWS_DEFAULT_REGION=us-east-1
            for i in $(seq $NUMBER_OF_TEAM)
            do
            TEAM="team$(printf "%02d" ${i})
            API_image=$(aws ecr list-images --repository-name production-support-course | grep "$COURSE$TEAMapi-dev-" | sort -V | tail -1 )
              API_build_num=$( echo "$API_image" | sed -e 's/"imageTag": "$COURSE$TEAMapi-dev-\\(.*\\)"/\\1/' | tr -d ' ')
            DB_image=$(aws ecr list-images --repository-name production-support-course | grep "$COURSE$TEAMdb-dev-" | sort -V | tail -1 )
              DB_build_num=$( echo "$DB_image" | sed -e 's/"imageTag": "$COURSE$TEAMdb-dev-\\(.*\\)"/\\1/' | tr -d ' ')
            FE_image=$(aws ecr list-images --repository-name production-support-course | grep "$COURSE$TEAMfe-dev-" | sort -V | tail -1 )
              FE_build_num=$( echo "$FE_image" | sed -e 's/"imageTag": "$COURSE$TEAMfe-dev-\\(.*\\)"/\\1/' | tr -d ' ')
            Currency_image=$(aws ecr list-images --repository-name production-support-course | grep "$COURSE$TEAMcurrency-api-dev-" | sort -V | tail -1 )
              Currency_build_num=$( echo "$Currency_image" | sed -e 's/"imageTag": "$COURSE$TEAMcurrency-api-dev-\\(.*\\)"/\\1/' | tr -d ' ')
            APIMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageAPIDevName}${API_build_num} --query 'images[].imageManifest' --output text)
            DBMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageDBDevName}${DB_build_num} --query 'images[].imageManifest' --output text)
            FEMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageFEDevName}${FE_build_num} --query 'images[].imageManifest' --output text)
            CURRENCYMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageCurrencyDevName}${Currency_build_num} --query 'images[].imageManifest' --output text)

            # Check API
            if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageAPIPrdName}${API_build_num}" | wc -l) -eq 0 ]
            then
              # We don't have prod so tag Dev to prod
              if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageAPIPrdName}${API_build_num} --image-manifest "$APIMANIFEST"
              then
                exitvalue=1
              fi
            fi
            # Check DB
            if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageDBPrdName}${DB_build_num}" | wc -l) -eq 0 ]
            then
              # We don't have uat so tag Dev to prod
              if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageDBPrdName}${DB_build_num} --image-manifest "$DBMANIFEST"
              then
                exitvalue="${exitvalue}2"
              fi
            fi
            
            # Check Front End
            if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageFEPrdName}${FE_build_num}" | wc -l) -eq 0 ]
            then
              # We don't have uat so tag Dev to prod
              if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageFEPrdName}${FE_build_num} --image-manifest "$FEMANIFEST"
              then
                exitvalue=3
              fi
            fi

          case ${exitvalue} in
            0) echo "Update OK"
               ;;
            1) echo "API failed to push to repository"
               ;;
            2) echo "DB failed to push to repository"
               ;;
            3) echo "AC failed to push to repository"
               ;;
            12) echo "API and DB failed to push to repository"
               ;;
            13) echo "API and AC failed to push to repository"
               ;;
            23) echo "DB and AC failed to push to repository"
               ;;
            123) echo "All images failed to push to repository"
               ;;
          esac

          exit ${exitvalue}
          done
'''
        }
      }
    }
  }
  environment {
    ECR_REPO = '108174090253.dkr.ecr.us-east-1.amazonaws.com/production-support-course'
    COURSE='c999'
    NUMBER_OF_TEAM='2'
    imageAPIDevName='api-dev-'
    imageAPIPrdName='api-prd-'
    imageDBDevName='db-dev-'
    imageDBPrdName='db-prd-'
    imageFEDevName='fe-dev-'
    imageFEPrdName='fe-prd-'
  }
}
