pipeline {
  agent {
    kubernetes {
      yaml """\
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            builder: promotion
        spec:
          serviceAccountName: jenkins-agent
          containers:
          - name: awscli
            image: amazon/aws-cli
            command:
            - cat
            tty: true
      """.stripIndent()
    }
  }
  stages {
    stage('Promote to Production') {
      steps {
        script {
          for (int teamNum = 26; teamNum <= 40; teamNum++) {
            container(name: 'awscli') {
              def formattedTeamNum = String.format("%02d", teamNum)
              env.imageAPIDevName = "c500team${formattedTeamNum}api-dev-"
              env.imageAPIProdName = "c500team${formattedTeamNum}api-prod-"
              env.imageDBDevName = "c500team${formattedTeamNum}db-dev-"
              env.imageDBProdName = "c500team${formattedTeamNum}db-prod-"
              env.imageFEDevName = "c500team${formattedTeamNum}fe-dev-"
              env.imageFEProdName = "c500team${formattedTeamNum}fe-prod-"

              sh '''
                set -x

                export AWS_DEFAULT_REGION=us-east-1

                # Replace 'your-ecr-repository-name' with your actual ECR repository name
                ecrname='production-support-course'

                # Print environment variables for debugging
                echo "Image API Dev Name: ${imageAPIDevName}"
                echo "Image API Prod Name: ${imageAPIProdName}"
                echo "Image DB Dev Name: ${imageDBDevName}"
                echo "Image DB Prod Name: ${imageDBProdName}"
                echo "Image FE Dev Name: ${imageFEDevName}"
                echo "Image FE Prod Name: ${imageFEProdName}"

                # API Images
                apiDevTags=$(aws ecr list-images --repository-name production-support-course  --filter "tagStatus=TAGGED" --query "imageIds[?contains(imageTag, '${imageAPIDevName}')].imageTag" --output text)
                echo "All API ImagesImages: ${apiDevTags}"
                latestAPITag=$(echo "${apiDevTags}" | sort -n | tail -n 1 | grep -oE '[0-9]+$' | awk '{print $1}')
                echo "Latest API Tag: ${latestAPITag}"
                imageAPIProd="${imageAPIProdName}${latestAPITag}"
                echo "Image API Prod: ${imageAPIProd}"

                # DB Images
                dbDevTags=$(aws ecr list-images --repository-name production-support-course  --filter "tagStatus=TAGGED" --query "imageIds[?contains(imageTag, '${imageDBDevName}')].imageTag" --output text)
                echo "All DB ImagesImages: ${dbDevTags}"
                latestDBTag=$(echo "${dbDevTags}" | sort -n | tail -n 1 | grep -oE '[0-9]+$' | awk '{print $1}')
                echo "Latest API Tag: ${latestDBTag}"
                imageDBProd="${imageDBProdName}${latestDBTag}"
                echo "Image DB Prod: ${imageDBProd}"

                # FE Images
                feDevTags=$(aws ecr list-images --repository-name production-support-course  --filter "tagStatus=TAGGED" --query "imageIds[?contains(imageTag, '${imageFEDevName}')].imageTag" --output text)
                echo "All FE ImagesImages: ${feDevTags}"
                # Step 3: Sort and get the latest tag
                latestFETag=$(echo "${feDevTags}" | sort -n | tail -n 1 | grep -oE '[0-9]+$' | awk '{print $1}')
                echo "Latest FE Tag: ${latestFETag}"
                # Final image tag for API Prod
                imageFEProd="${imageFEProdName}${latestFETag}"
                echo "Image FE Prod: ${imageFEProd}"



                # Check API
                if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageAPIProd}" | wc -l) -eq 0 ]
                then
                  # We don't have prod so tag Dev to prod
                  if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageAPIProd} --image-manifest "$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageAPIDevName}${latestAPITag} --query 'images[].imageManifest' --output text)"
                  then
                    exitvalue=1
                  fi
                fi

                # Check API
                if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageDBProd}" | wc -l) -eq 0 ]
                then
                  # We don't have prod so tag Dev to prod
                  if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageDBProd} --image-manifest "$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageDBDevName}${latestDBTag} --query 'images[].imageManifest' --output text)"
                  then
                    exitvalue=1
                  fi
                fi

                # Check API
                if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageFEProd}" | wc -l) -eq 0 ]
                then
                  # We don't have prod so tag Dev to prod
                  if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageFEProd} --image-manifest "$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageFEDevName}${latestFETag} --query 'images[].imageManifest' --output text)"
                  then
                    exitvalue=1
                  fi
                fi

                # ... (similar checks for DB and Front End)

                # Print exit value for debugging
                echo "Exit Value: ${exitvalue}"

                case ${exitvalue} in
                  0) echo "Update OK"
                     ;;
                  1) echo "API failed to push to repository"
                     ;;
                  2) echo "DB failed to push to repository"
                     ;;
                  3) echo "Front End failed to push to repository"
                     ;;
                  12) echo "API and DB failed to push to repository"
                      ;;
                  13) echo "API and Front End failed to push to repository"
                      ;;
                  23) echo "DB and Front End failed to push to repository"
                      ;;
                  123) echo "All images failed to push to repository"
                       ;;
                esac

                exit ${exitvalue}
              '''
            }
          }
        }
      }
    }
  }
  environment {
    ECR_REPO = '108174090253.dkr.ecr.us-east-1.amazonaws.com/production-support-course'
  }
}